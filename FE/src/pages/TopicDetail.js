import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { useAuth } from "../contexts/AuthContext";
import {
  ArrowLeft,
  BookOpen,
  Clock,
  Award,
  CheckCircle,
  XCircle,
  RotateCcw,
  Star,
  History,
  Lightbulb,
  Zap,
} from "lucide-react";

const TopicDetail = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { user, updateUser, canAccessLevel } = useAuth();

  const [topic, setTopic] = useState(null);
  const [activeTab, setActiveTab] = useState("overview");
  const [showQuiz, setShowQuiz] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswers, setSelectedAnswers] = useState({});
  const [quizCompleted, setQuizCompleted] = useState(false);
  const [quizScore, setQuizScore] = useState(0);
  const [loading, setLoading] = useState(true);
  const [progress, setProgress] = useState(null);

  useEffect(() => {
    fetchTopicDetail();
    fetchProgress();
  }, [id]);

  const fetchTopicDetail = () => {
    try {
      console.log("üîç Fetching topic detail for ID:", id);
      setLoading(true);

      // Mock topics data
      const mockTopics = [
        {
          id: 1,
          title: "S·ªë nguy√™n",
          description: "Kh√°m ph√° th·∫ø gi·ªõi s·ªë √¢m v√† s·ªë d∆∞∆°ng",
          level: "L·ªõp 6",
          category: "ƒê·∫°i s·ªë",
          xp: 100,
          knowledge: {
            theory:
              "S·ªë nguy√™n bao g·ªìm c√°c s·ªë √¢m, s·ªë kh√¥ng v√† c√°c s·ªë d∆∞∆°ng. Ch√∫ng ƒë∆∞·ª£c bi·ªÉu di·ªÖn tr√™n tr·ª•c s·ªë v√† c√≥ c√°c quy t·∫Øc t√≠nh to√°n ri√™ng.",
            examples: ["V√≠ d·ª• 1: -5 + 3 = -2", "V√≠ d·ª• 2: (-2) √ó 4 = -8"],
            history:
              "S·ªë nguy√™n ƒë∆∞·ª£c ph√°t tri·ªÉn t·ª´ th·ªùi c·ªï ƒë·∫°i ƒë·ªÉ gi·∫£i quy·∫øt c√°c b√†i to√°n v·ªÅ n·ª£ n·∫ßn v√† nhi·ªát ƒë·ªô.",
            application:
              "S·ªë nguy√™n ƒë∆∞·ª£c s·ª≠ d·ª•ng trong nhi·ªÅu lƒ©nh v·ª±c nh∆∞ kinh t·∫ø, khoa h·ªçc, v√† ƒë·ªùi s·ªëng h√†ng ng√†y.",
          },
          content: {
            knowledge:
              "S·ªë nguy√™n bao g·ªìm c√°c s·ªë √¢m, s·ªë kh√¥ng v√† c√°c s·ªë d∆∞∆°ng. Ch√∫ng ƒë∆∞·ª£c bi·ªÉu di·ªÖn tr√™n tr·ª•c s·ªë v√† c√≥ c√°c quy t·∫Øc t√≠nh to√°n ri√™ng.\n\nC√°c t√≠nh ch·∫•t c∆° b·∫£n:\n- Ph√©p c·ªông s·ªë nguy√™n\n- Ph√©p tr·ª´ s·ªë nguy√™n\n- Ph√©p nh√¢n v√† chia s·ªë nguy√™n",
            history:
              "S·ªë nguy√™n ƒë∆∞·ª£c ph√°t tri·ªÉn t·ª´ th·ªùi c·ªï ƒë·∫°i ƒë·ªÉ gi·∫£i quy·∫øt c√°c b√†i to√°n v·ªÅ n·ª£ n·∫ßn v√† nhi·ªát ƒë·ªô. Ng∆∞·ªùi ·∫§n ƒê·ªô c·ªï ƒë·∫°i ƒë√£ s·ª≠ d·ª•ng s·ªë √¢m t·ª´ th·∫ø k·ª∑ th·ª© 7.\n\nC√°c m·ªëc l·ªãch s·ª≠ quan tr·ªçng:\n- Th·∫ø k·ª∑ 7: Ng∆∞·ªùi ·∫§n ƒê·ªô s·ª≠ d·ª•ng s·ªë √¢m\n- Th·∫ø k·ª∑ 13: Fibonacci gi·ªõi thi·ªáu s·ªë √¢m v√†o ch√¢u √Çu",
            application:
              "S·ªë nguy√™n ƒë∆∞·ª£c s·ª≠ d·ª•ng trong nhi·ªÅu lƒ©nh v·ª±c nh∆∞ kinh t·∫ø, khoa h·ªçc, v√† ƒë·ªùi s·ªëng h√†ng ng√†y.\n\n·ª®ng d·ª•ng th·ª±c t·∫ø:\n- T√≠nh to√°n nhi·ªát ƒë·ªô (√¢m/d∆∞∆°ng)\n- T√†i ch√≠nh (l√£i/l·ªó)\n- ƒê·ªô cao (tr√™n/d∆∞·ªõi m·ª±c n∆∞·ªõc bi·ªÉn)\n- L·∫≠p tr√¨nh m√°y t√≠nh",
          },
          videos: [],
          quizzes: [
            {
              id: 1,
              question: "K·∫øt qu·∫£ c·ªßa ph√©p t√≠nh (-3) + 5 l√†:",
              answers: ["2", "-2", "8", "-8"],
              correctAnswer: 0,
              explanation:
                "(-3) + 5 = 2 v√¨ ta c·ªông s·ªë √¢m v·ªõi s·ªë d∆∞∆°ng l·ªõn h∆°n.",
            },
          ],
        },
        {
          id: 2,
          title: "Ph√¢n s·ªë",
          description: "Hi·ªÉu v·ªÅ c√°c ph·∫ßn c·ªßa m·ªôt t·ªïng th·ªÉ",
          level: "L·ªõp 6",
          category: "ƒê·∫°i s·ªë",
          xp: 120,
          knowledge: {
            theory:
              "Ph√¢n s·ªë l√† c√°ch bi·ªÉu di·ªÖn m·ªôt ph·∫ßn c·ªßa t·ªïng th·ªÉ. G·ªìm t·ª≠ s·ªë v√† m·∫´u s·ªë.",
            examples: ["V√≠ d·ª• 1: 1/2 + 1/4 = 3/4", "V√≠ d·ª• 2: 2/3 √ó 3/4 = 1/2"],
            history: "Ph√¢n s·ªë ƒë∆∞·ª£c s·ª≠ d·ª•ng t·ª´ th·ªùi Ai C·∫≠p c·ªï ƒë·∫°i.",
            application: "Ph√¢n s·ªë ƒë∆∞·ª£c d√πng trong n·∫•u ƒÉn, x√¢y d·ª±ng, khoa h·ªçc.",
          },
          content: {
            knowledge:
              "Ph√¢n s·ªë l√† c√°ch bi·ªÉu di·ªÖn m·ªôt ph·∫ßn c·ªßa t·ªïng th·ªÉ. G·ªìm t·ª≠ s·ªë v√† m·∫´u s·ªë.\n\nC√°c kh√°i ni·ªám c∆° b·∫£n:\n- T·ª≠ s·ªë: s·ªë ·ªü tr√™n\n- M·∫´u s·ªë: s·ªë ·ªü d∆∞·ªõi\n- Ph√¢n s·ªë t·ªëi gi·∫£n\n- So s√°nh ph√¢n s·ªë",
            history:
              "Ph√¢n s·ªë ƒë∆∞·ª£c s·ª≠ d·ª•ng t·ª´ th·ªùi Ai C·∫≠p c·ªï ƒë·∫°i. Ng∆∞·ªùi Ai C·∫≠p c·ªï ƒë·∫°i ƒë√£ bi·∫øt c√°ch s·ª≠ d·ª•ng ph√¢n s·ªë ƒë∆°n v·ªã t·ª´ 3000 nƒÉm tr∆∞·ªõc C√¥ng nguy√™n.",
            application:
              "Ph√¢n s·ªë ƒë∆∞·ª£c d√πng trong n·∫•u ƒÉn, x√¢y d·ª±ng, khoa h·ªçc.\n\nV√≠ d·ª• ·ª©ng d·ª•ng:\n- C√¥ng th·ª©c n·∫•u ƒÉn (1/2 c·ªëc b·ªôt)\n- ƒêo l∆∞·ªùng x√¢y d·ª±ng\n- T·ª∑ l·ªá h√≥a h·ªçc",
          },
          videos: [],
          quizzes: [
            {
              id: 1,
              question: "K·∫øt qu·∫£ c·ªßa ph√©p t√≠nh 1/2 + 1/4 l√†:",
              answers: ["3/4", "2/6", "1/6", "3/6"],
              correctAnswer: 0,
              explanation: "1/2 + 1/4 = 2/4 + 1/4 = 3/4",
            },
          ],
        },
        {
          id: 3,
          title: "ƒê·ªãnh l√Ω Pythagore",
          description: "Kh√°m ph√° m·ªëi quan h·ªá gi·ªØa c√°c c·∫°nh tam gi√°c vu√¥ng",
          level: "L·ªõp 8",
          category: "H√¨nh h·ªçc",
          xp: 150,
          knowledge: {
            theory:
              "Trong tam gi√°c vu√¥ng, b√¨nh ph∆∞∆°ng c·∫°nh huy·ªÅn b·∫±ng t·ªïng b√¨nh ph∆∞∆°ng hai c·∫°nh g√≥c vu√¥ng.",
            examples: [
              "V√≠ d·ª• 1: Tam gi√°c vu√¥ng c√≥ hai c·∫°nh g√≥c vu√¥ng l√† 3 v√† 4, c·∫°nh huy·ªÅn l√† 5",
            ],
            history:
              "ƒê·ªãnh l√Ω ƒë∆∞·ª£c ƒë·∫∑t t√™n theo nh√† to√°n h·ªçc Hy L·∫°p Pythagoras.",
            application:
              "ƒê·ªãnh l√Ω Pythagore ƒë∆∞·ª£c s·ª≠ d·ª•ng trong x√¢y d·ª±ng, navigation, computer graphics.",
          },
          content: {
            knowledge:
              "Trong tam gi√°c vu√¥ng, b√¨nh ph∆∞∆°ng c·∫°nh huy·ªÅn b·∫±ng t·ªïng b√¨nh ph∆∞∆°ng hai c·∫°nh g√≥c vu√¥ng.\n\nC√¥ng th·ª©c: a¬≤ + b¬≤ = c¬≤\n\nTrong ƒë√≥:\n- a, b l√† hai c·∫°nh g√≥c vu√¥ng\n- c l√† c·∫°nh huy·ªÅn",
            history:
              "ƒê·ªãnh l√Ω ƒë∆∞·ª£c ƒë·∫∑t t√™n theo nh√† to√°n h·ªçc Hy L·∫°p Pythagoras (kho·∫£ng 570-495 TCN). Tuy nhi√™n, ƒë·ªãnh l√Ω n√†y ƒë√£ ƒë∆∞·ª£c bi·∫øt ƒë·∫øn t·ª´ th·ªùi Babylon c·ªï ƒë·∫°i.",
            application:
              "ƒê·ªãnh l√Ω Pythagore ƒë∆∞·ª£c s·ª≠ d·ª•ng trong x√¢y d·ª±ng, navigation, computer graphics.\n\n·ª®ng d·ª•ng:\n- T√≠nh kho·∫£ng c√°ch\n- Thi·∫øt k·∫ø ki·∫øn tr√∫c\n- GPS v√† ƒë·ªãnh v·ªã\n- ƒê·ªì h·ªça m√°y t√≠nh",
          },
          videos: [],
          quizzes: [
            {
              id: 1,
              question:
                "Trong tam gi√°c vu√¥ng v·ªõi hai c·∫°nh g√≥c vu√¥ng l√† 3 v√† 4, c·∫°nh huy·ªÅn l√†:",
              answers: ["5", "6", "7", "8"],
              correctAnswer: 0,
              explanation: "Theo ƒë·ªãnh l√Ω Pythagore: 3¬≤ + 4¬≤ = 9 + 16 = 25 = 5¬≤",
            },
          ],
        },
        {
          id: 4,
          title: "X√°c su·∫•t c∆° b·∫£n",
          description: "T√≠nh to√°n kh·∫£ nƒÉng x·∫£y ra c·ªßa c√°c s·ª± ki·ªán",
          level: "L·ªõp 7",
          category: "Th·ªëng k√™",
          xp: 130,
          knowledge: {
            theory: "X√°c su·∫•t l√† th∆∞·ªõc ƒëo kh·∫£ nƒÉng x·∫£y ra c·ªßa m·ªôt s·ª± ki·ªán.",
            examples: ["V√≠ d·ª• 1: X√°c su·∫•t tung ƒë·ªìng xu ƒë∆∞·ª£c m·∫∑t ng·ª≠a l√† 1/2"],
            history: "L√Ω thuy·∫øt x√°c su·∫•t ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi Pascal v√† Fermat.",
            application:
              "X√°c su·∫•t ƒë∆∞·ª£c d√πng trong th·ªëng k√™, kinh t·∫ø, khoa h·ªçc.",
          },
          content: {
            knowledge:
              "X√°c su·∫•t l√† th∆∞·ªõc ƒëo kh·∫£ nƒÉng x·∫£y ra c·ªßa m·ªôt s·ª± ki·ªán.\n\nC√¥ng th·ª©c c∆° b·∫£n:\n- P(A) = S·ªë k·∫øt qu·∫£ thu·∫≠n l·ª£i / T·ªïng s·ªë k·∫øt qu·∫£ c√≥ th·ªÉ\n- 0 ‚â§ P(A) ‚â§ 1\n\nT√≠nh ch·∫•t:\n- P(A) + P(A') = 1\n- P(‚àÖ) = 0 (s·ª± ki·ªán kh√¥ng th·ªÉ)\n- P(Œ©) = 1 (s·ª± ki·ªán ch·∫Øc ch·∫Øn)",
            history:
              "L√Ω thuy·∫øt x√°c su·∫•t ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi Pascal v√† Fermat v√†o th·∫ø k·ª∑ 17. H·ªç ƒë√£ nghi√™n c·ª©u ƒë·ªÉ gi·∫£i quy·∫øt c√°c v·∫•n ƒë·ªÅ v·ªÅ c·ªù b·∫°c.\n\nC√°c m·ªëc quan tr·ªçng:\n- 1654: Pascal v√† Fermat trao ƒë·ªïi th∆∞ v·ªÅ chia ti·ªÅn c∆∞·ª£c\n- 1713: Jakob Bernoulli xu·∫•t b·∫£n 'Ars Conjectandi'\n- 1933: Kolmogorov thi·∫øt l·∫≠p n·ªÅn t·∫£ng to√°n h·ªçc hi·ªán ƒë·∫°i",
            application:
              "X√°c su·∫•t ƒë∆∞·ª£c d√πng trong th·ªëng k√™, kinh t·∫ø, khoa h·ªçc.\n\n·ª®ng d·ª•ng th·ª±c t·∫ø:\n- D·ª± b√°o th·ªùi ti·∫øt\n- B·∫£o hi·ªÉm v√† t√†i ch√≠nh\n- Y h·ªçc v√† d∆∞·ª£c ph·∫©m\n- Tr√≤ ch∆°i v√† th·ªÉ thao\n- Khoa h·ªçc d·ªØ li·ªáu",
          },
          videos: [],
          quizzes: [
            {
              id: 1,
              question: "X√°c su·∫•t tung ƒë·ªìng xu ƒë∆∞·ª£c m·∫∑t ng·ª≠a l√†:",
              answers: ["1/4", "1/2", "3/4", "1"],
              correctAnswer: 1,
              explanation: "ƒê·ªìng xu c√≥ 2 m·∫∑t, x√°c su·∫•t ƒë∆∞·ª£c m·∫∑t ng·ª≠a l√† 1/2",
            },
          ],
        },
        {
          id: 5,
          title: "H·ªá ph∆∞∆°ng tr√¨nh b·∫≠c nh·∫•t",
          description: "Gi·∫£i h·ªá ph∆∞∆°ng tr√¨nh v·ªõi hai ·∫©n s·ªë",
          level: "L·ªõp 9",
          category: "ƒê·∫°i s·ªë",
          xp: 180,
          knowledge: {
            theory:
              "H·ªá ph∆∞∆°ng tr√¨nh b·∫≠c nh·∫•t l√† t·∫≠p h·ª£p c√°c ph∆∞∆°ng tr√¨nh b·∫≠c nh·∫•t c√≥ c√πng ·∫©n s·ªë.",
            examples: [
              "V√≠ d·ª• 1: Gi·∫£i h·ªá {x + y = 5; x - y = 1} ƒë∆∞·ª£c x = 3, y = 2",
            ],
            history:
              "Ph∆∞∆°ng ph√°p gi·∫£i h·ªá ph∆∞∆°ng tr√¨nh ƒë∆∞·ª£c ph√°t tri·ªÉn t·ª´ th·ªùi c·ªï ƒë·∫°i.",
            application:
              "H·ªá ph∆∞∆°ng tr√¨nh ƒë∆∞·ª£c d√πng trong kinh t·∫ø, k·ªπ thu·∫≠t, khoa h·ªçc.",
          },
          content: {
            knowledge:
              "H·ªá ph∆∞∆°ng tr√¨nh b·∫≠c nh·∫•t l√† t·∫≠p h·ª£p c√°c ph∆∞∆°ng tr√¨nh b·∫≠c nh·∫•t c√≥ c√πng ·∫©n s·ªë.\n\nD·∫°ng t·ªïng qu√°t h·ªá 2 ph∆∞∆°ng tr√¨nh 2 ·∫©n:\n{ax + by = c\n{dx + ey = f\n\nPh∆∞∆°ng ph√°p gi·∫£i:\n1. Ph∆∞∆°ng ph√°p th·∫ø\n2. Ph∆∞∆°ng ph√°p c·ªông ƒë·∫°i s·ªë\n3. Ph∆∞∆°ng ph√°p ƒë·ªì th·ªã\n4. S·ª≠ d·ª•ng ƒë·ªãnh th·ª©c (Cramer)",
            history:
              "Ph∆∞∆°ng ph√°p gi·∫£i h·ªá ph∆∞∆°ng tr√¨nh ƒë∆∞·ª£c ph√°t tri·ªÉn t·ª´ th·ªùi c·ªï ƒë·∫°i.\n\nL·ªãch s·ª≠ ph√°t tri·ªÉn:\n- Babylon c·ªï ƒë·∫°i: Gi·∫£i c√°c b√†i to√°n ƒë∆°n gi·∫£n\n- Trung Qu·ªëc c·ªï ƒë·∫°i: Ph∆∞∆°ng ph√°p kh·ª≠ Gauss\n- Th·∫ø k·ª∑ 18: Cramer ph√°t tri·ªÉn quy t·∫Øc ƒë·ªãnh th·ª©c\n- Th·∫ø k·ª∑ 19: Gauss ho√†n thi·ªán ph∆∞∆°ng ph√°p kh·ª≠",
            application:
              "H·ªá ph∆∞∆°ng tr√¨nh ƒë∆∞·ª£c d√πng trong kinh t·∫ø, k·ªπ thu·∫≠t, khoa h·ªçc.\n\n·ª®ng d·ª•ng th·ª±c t·∫ø:\n- T·ªëi ∆∞u h√≥a s·∫£n xu·∫•t\n- Ph√¢n t√≠ch th·ªã tr∆∞·ªùng\n- M·∫°ch ƒëi·ªán\n- C√¢n b·∫±ng h√≥a h·ªçc\n- M√¥ h√¨nh kinh t·∫ø",
          },
          videos: [],
          quizzes: [
            {
              id: 1,
              question: "Nghi·ªám c·ªßa h·ªá ph∆∞∆°ng tr√¨nh {x + y = 5; x - y = 1} l√†:",
              answers: [
                "x = 3, y = 2",
                "x = 2, y = 3",
                "x = 4, y = 1",
                "x = 1, y = 4",
              ],
              correctAnswer: 0,
              explanation:
                "C·ªông hai ph∆∞∆°ng tr√¨nh: 2x = 6 ‚Üí x = 3. Th·∫ø v√†o: 3 + y = 5 ‚Üí y = 2",
            },
          ],
        },
      ];

      // Get topics from localStorage
      const localTopics = JSON.parse(localStorage.getItem("topics") || "[]");

      // Combine mock topics with localStorage topics
      const allTopics = [...mockTopics, ...localTopics];

      // Find topic by ID
      const foundTopic = allTopics.find(
        (t) => t.id === parseInt(id) || t.id === id
      );

      if (foundTopic) {
        // Check grade access for students
        if (user?.role === "student" && !canAccessLevel(foundTopic.level)) {
          console.log("‚ùå Grade access denied for topic:", foundTopic.title);
          alert(
            `B·∫°n ch·ªâ c√≥ th·ªÉ h·ªçc ch·ªß ƒë·ªÅ ƒë√∫ng l·ªõp c·ªßa m√¨nh!\n\nCh·ªß ƒë·ªÅ "${foundTopic.title}" d√†nh cho ${foundTopic.level}.\nB·∫°n hi·ªán t·∫°i ƒëang ·ªü l·ªõp ${user.grade}.`
          );
          navigate("/learning-map");
          return;
        }

        setTopic(foundTopic);
        console.log("‚úÖ Topic found:", foundTopic);
      } else {
        console.log("‚ùå Topic not found for ID:", id);
        setTopic(null);
      }
    } catch (error) {
      console.error("‚ùå Failed to fetch topic:", error);
      setTopic(null);
    } finally {
      setLoading(false);
    }
  };

  const fetchProgress = () => {
    try {
      const savedProgress = JSON.parse(
        localStorage.getItem("userProgress") || "[]"
      );
      const topicProgress = savedProgress.find(
        (p) => p.topicId === parseInt(id)
      );
      setProgress(topicProgress || null);
      console.log("üìä Progress loaded:", topicProgress);
    } catch (error) {
      console.error("‚ùå Failed to fetch progress:", error);
    }
  };

  const handleAnswerSelect = (questionIndex, answerIndex) => {
    setSelectedAnswers({
      ...selectedAnswers,
      [questionIndex]: answerIndex,
    });
  };

  const handleNextQuestion = () => {
    if (
      topic.quizzes &&
      Array.isArray(topic.quizzes) &&
      currentQuestion < topic.quizzes.length - 1
    ) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      handleQuizComplete();
    }
  };

  const handlePrevQuestion = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
    }
  };

  const handleQuizComplete = () => {
    if (
      !topic.quizzes ||
      !Array.isArray(topic.quizzes) ||
      topic.quizzes.length === 0
    ) {
      alert("Ch∆∞a c√≥ c√¢u h·ªèi cho ch·ªß ƒë·ªÅ n√†y!");
      return;
    }

    let correctAnswers = 0;
    topic.quizzes.forEach((question, index) => {
      if (selectedAnswers[index] === question.correctAnswer) {
        correctAnswers++;
      }
    });

    const score = Math.round((correctAnswers / topic.quizzes.length) * 100);
    setQuizScore(score);
    setQuizCompleted(true);

    // Save progress to localStorage
    try {
      const savedProgress = JSON.parse(
        localStorage.getItem("userProgress") || "[]"
      );
      const filteredProgress = savedProgress.filter(
        (p) => p.topicId !== parseInt(id)
      );

      const newProgress = {
        topicId: parseInt(id),
        score: score,
        completed: score >= 70,
        completedAt: new Date().toISOString(),
        answers: selectedAnswers,
      };

      filteredProgress.push(newProgress);
      localStorage.setItem("userProgress", JSON.stringify(filteredProgress));

      console.log("üíæ Progress saved:", newProgress);

      // Update user XP if completed
      if (score >= 70 && (!progress || !progress.completed)) {
        const currentUser = JSON.parse(localStorage.getItem("user") || "{}");
        const newXP = (currentUser.xp || 0) + (topic.xp || 100);
        const newLevel = Math.floor(newXP / 500) + 1;

        const updatedUser = { ...currentUser, xp: newXP, level: newLevel };
        localStorage.setItem("user", JSON.stringify(updatedUser));
        updateUser(updatedUser);

        console.log("üéØ XP updated:", {
          oldXP: currentUser.xp,
          newXP,
          level: newLevel,
        });
      }
    } catch (error) {
      console.error("‚ùå Failed to save progress:", error);
    }
  };

  const resetQuiz = () => {
    setSelectedAnswers({});
    setCurrentQuestion(0);
    setQuizCompleted(false);
    setQuizScore(0);
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="spinner"></div>
      </div>
    );
  }

  if (!topic) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">
            Kh√¥ng t√¨m th·∫•y ch·ªß ƒë·ªÅ
          </h2>
          <button
            onClick={() => navigate("/learning-map")}
            className="btn-primary"
          >
            V·ªÅ B·∫£n ƒë·ªì h·ªçc t·∫≠p
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <button
            onClick={() => navigate(-1)}
            className="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 bg-blue-50 border border-blue-200 rounded-lg hover:bg-blue-100 hover:border-blue-300 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 mb-4 cursor-pointer"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Quay l·∫°i
          </button>

          <div className="card">
            <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between">
              <div className="flex-1">
                <div className="flex items-center space-x-3 mb-4">
                  <span className="badge badge-primary">{topic.level}</span>
                  <span className="badge badge-warning">{topic.category}</span>
                  {progress && progress.completed && (
                    <span className="badge badge-success">ƒê√£ ho√†n th√†nh</span>
                  )}
                </div>
                <h1 className="text-3xl font-bold text-gray-900 mb-4">
                  {topic.title}
                </h1>
                <p className="text-gray-600 text-lg mb-6">
                  {topic.description}
                </p>
                <div className="flex items-center space-x-6">
                  <div className="flex items-center space-x-2">
                    <Clock className="h-5 w-5 text-gray-400" />
                    <span className="text-gray-600">{topic.level}</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Award className="h-5 w-5 text-yellow-500" />
                    <span className="text-gray-600">{topic.xp} XP</span>
                  </div>
                  {progress && (
                    <div className="flex items-center space-x-2">
                      <Star className="h-5 w-5 text-green-500" />
                      <span className="text-gray-600">
                        ƒêi·ªÉm: {progress.score}%
                      </span>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Enhanced Navigation Bar - Always visible */}
        <div className="card mb-6">
          <div className="flex flex-wrap gap-2">
            <button
              onClick={() => {
                setActiveTab("overview");
                setShowQuiz(false);
              }}
              className={`inline-flex items-center px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 cursor-pointer ${
                activeTab === "overview" && !showQuiz
                  ? "bg-blue-600 text-white shadow-md"
                  : "bg-gray-100 text-gray-700 hover:bg-gray-200"
              }`}
            >
              <BookOpen className="h-4 w-4 mr-2" />
              Th√¥ng tin ch·ªß ƒë·ªÅ
            </button>

            <button
              onClick={() => {
                setActiveTab("video");
                setShowQuiz(false);
              }}
              className={`inline-flex items-center px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 cursor-pointer ${
                activeTab === "video" && !showQuiz
                  ? "bg-blue-600 text-white shadow-md"
                  : "bg-gray-100 text-gray-700 hover:bg-gray-200"
              }`}
            >
              <svg
                className="h-4 w-4 mr-2"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"
                />
              </svg>
              Video
            </button>

            <button
              onClick={() => setShowQuiz(true)}
              className={`inline-flex items-center px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 cursor-pointer ${
                showQuiz
                  ? "bg-blue-600 text-white shadow-md"
                  : "bg-gray-100 text-gray-700 hover:bg-gray-200"
              }`}
            >
              <Zap className="h-4 w-4 mr-2" />
              Quiz
            </button>

            <button
              onClick={() => {
                setActiveTab("knowledge");
                setShowQuiz(false);
              }}
              className={`inline-flex items-center px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 cursor-pointer ${
                activeTab === "knowledge" && !showQuiz
                  ? "bg-blue-600 text-white shadow-md"
                  : "bg-gray-100 text-gray-700 hover:bg-gray-200"
              }`}
            >
              <BookOpen className="h-4 w-4 mr-2" />
              Ki·∫øn th·ª©c
            </button>

            <button
              onClick={() => {
                setActiveTab("history");
                setShowQuiz(false);
              }}
              className={`inline-flex items-center px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 cursor-pointer ${
                activeTab === "history" && !showQuiz
                  ? "bg-blue-600 text-white shadow-md"
                  : "bg-gray-100 text-gray-700 hover:bg-gray-200"
              }`}
            >
              <History className="h-4 w-4 mr-2" />
              L·ªãch s·ª≠
            </button>

            <button
              onClick={() => {
                setActiveTab("application");
                setShowQuiz(false);
              }}
              className={`inline-flex items-center px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 cursor-pointer ${
                activeTab === "application" && !showQuiz
                  ? "bg-blue-600 text-white shadow-md"
                  : "bg-gray-100 text-gray-700 hover:bg-gray-200"
              }`}
            >
              <Lightbulb className="h-4 w-4 mr-2" />
              ·ª®ng d·ª•ng
            </button>
          </div>
        </div>

        {!showQuiz ? (
          <>
            {/* Overview Section */}
            {activeTab === "overview" && (
              <div className="card mb-8">
                <h2 className="card-title mb-6">T·ªïng quan ch·ªß ƒë·ªÅ</h2>
                <div className="space-y-4">
                  <div>
                    <h3 className="font-semibold text-gray-900 mb-2">M√¥ t·∫£</h3>
                    <p className="text-gray-700">{topic.description}</p>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="bg-blue-50 p-4 rounded-lg">
                      <div className="flex items-center space-x-2 mb-2">
                        <Clock className="h-5 w-5 text-blue-600" />
                        <span className="font-medium text-blue-900">
                          C·∫•p ƒë·ªô
                        </span>
                      </div>
                      <p className="text-blue-700">{topic.level}</p>
                    </div>
                    <div className="bg-green-50 p-4 rounded-lg">
                      <div className="flex items-center space-x-2 mb-2">
                        <BookOpen className="h-5 w-5 text-green-600" />
                        <span className="font-medium text-green-900">
                          Danh m·ª•c
                        </span>
                      </div>
                      <p className="text-green-700">{topic.category}</p>
                    </div>
                    <div className="bg-yellow-50 p-4 rounded-lg">
                      <div className="flex items-center space-x-2 mb-2">
                        <Award className="h-5 w-5 text-yellow-600" />
                        <span className="font-medium text-yellow-900">
                          ƒêi·ªÉm XP
                        </span>
                      </div>
                      <p className="text-yellow-700">{topic.xp} XP</p>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Video Section */}
            {activeTab === "video" && (
              <div className="card mb-8">
                <h2 className="card-title mb-6">Video b√†i h·ªçc</h2>
                {topic.videos &&
                Array.isArray(topic.videos) &&
                topic.videos.length > 0 ? (
                  <div className="space-y-4">
                    {topic.videos.map((video, index) => (
                      <div key={index} className="border rounded-lg p-4">
                        <h3 className="font-medium text-gray-900 mb-2">
                          {video.title || `Video ${index + 1}`}
                        </h3>
                        {video.description && (
                          <p className="text-sm text-gray-600 mb-3">
                            {video.description}
                          </p>
                        )}

                        {/* Debug video data */}
                        {console.log(`üé• Video ${index + 1} debug:`, {
                          title: video.title,
                          hasUrl: !!video.url,
                          hasFile: !!video.file,
                          uploadType: video.uploadType,
                          urlType: video.url
                            ? video.url.startsWith("data:")
                              ? "base64"
                              : "url"
                            : "none",
                          urlPreview: video.url
                            ? video.url.substring(0, 50) + "..."
                            : "none",
                        })}

                        {video.url ? (
                          video.url.includes("youtube.com") ||
                          video.url.includes("youtu.be") ? (
                            <div className="w-full h-96 bg-black rounded-lg overflow-hidden">
                              <iframe
                                src={video.url.replace("watch?v=", "embed/")}
                                title={video.title || `Video ${index + 1}`}
                                className="w-full h-full"
                                frameBorder="0"
                                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                                allowFullScreen
                              ></iframe>
                            </div>
                          ) : (
                            <div className="w-full h-96 bg-black rounded-lg overflow-hidden flex items-center justify-center">
                              <video
                                controls
                                className="w-full h-full"
                                src={video.url}
                              >
                                Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ video.
                              </video>
                            </div>
                          )
                        ) : video.file || video.uploadType === "file" ? (
                          <div className="w-full h-96 bg-black rounded-lg overflow-hidden flex items-center justify-center">
                            <video
                              controls
                              className="w-full h-full"
                              src={
                                // ∆Øu ti√™n base64 data n·∫øu c√≥
                                video.file?.data ||
                                // Ho·∫∑c URL n·∫øu l√† base64
                                (video.url && video.url.startsWith("data:"))
                                  ? video.url
                                  : // Ho·∫∑c x·ª≠ l√Ω file object/string
                                  typeof video.file === "string"
                                  ? video.file
                                  : video.file && video.file.url
                                  ? video.file.url
                                  : video.file instanceof File
                                  ? URL.createObjectURL(video.file)
                                  : video.url || ""
                              }
                            >
                              Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ video.
                            </video>
                          </div>
                        ) : (
                          <div className="w-full h-96 bg-gray-100 rounded-lg flex items-center justify-center">
                            <p className="text-gray-500">
                              Kh√¥ng c√≥ video ƒë·ªÉ hi·ªÉn th·ªã
                            </p>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="w-full h-96 bg-gray-100 rounded-lg flex items-center justify-center">
                    <div className="text-center">
                      <div className="text-gray-400 mb-2">
                        <svg
                          className="h-12 w-12 mx-auto"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke="currentColor"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"
                          />
                        </svg>
                      </div>
                      <p className="text-gray-500 font-medium">
                        Ch∆∞a c√≥ video b√†i h·ªçc
                      </p>
                      <p className="text-sm text-gray-400">
                        Video s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau
                      </p>
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Content Sections */}
            {(activeTab === "knowledge" ||
              activeTab === "history" ||
              activeTab === "application") && (
              <div className="card">
                <div className="prose max-w-none">
                  {activeTab === "knowledge" && (
                    <div>
                      <h3 className="text-xl font-semibold text-gray-900 mb-4">
                        Ki·∫øn th·ª©c c∆° b·∫£n
                      </h3>
                      <div className="text-gray-700 leading-relaxed whitespace-pre-line">
                        {topic.content?.knowledge ||
                          topic.knowledge?.theory ||
                          "N·ªôi dung ki·∫øn th·ª©c s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau."}
                      </div>
                    </div>
                  )}

                  {activeTab === "history" && (
                    <div>
                      <h3 className="text-xl font-semibold text-gray-900 mb-4">
                        L·ªãch s·ª≠ ph√°t tri·ªÉn
                      </h3>
                      <div className="text-gray-700 leading-relaxed whitespace-pre-line">
                        {topic.content?.history ||
                          topic.knowledge?.history ||
                          "N·ªôi dung l·ªãch s·ª≠ s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau."}
                      </div>
                    </div>
                  )}

                  {activeTab === "application" && (
                    <div>
                      <h3 className="text-xl font-semibold text-gray-900 mb-4">
                        ·ª®ng d·ª•ng th·ª±c ti·ªÖn
                      </h3>
                      <div className="text-gray-700 leading-relaxed whitespace-pre-line">
                        {topic.content?.application ||
                          topic.knowledge?.application ||
                          "N·ªôi dung ·ª©ng d·ª•ng s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau."}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}
          </>
        ) : (
          <div className="card">
            {!topic.quizzes ||
            !Array.isArray(topic.quizzes) ||
            topic.quizzes.length === 0 ? (
              <div className="text-center py-8">
                <div className="text-gray-500 mb-4">
                  <Zap className="h-12 w-12 mx-auto mb-2 opacity-50" />
                  <h3 className="text-lg font-medium">Ch∆∞a c√≥ c√¢u h·ªèi</h3>
                  <p className="text-sm">Ch·ªß ƒë·ªÅ n√†y ch∆∞a c√≥ c√¢u h·ªèi quiz.</p>
                </div>
                <button
                  onClick={() => setShowQuiz(false)}
                  className="btn-primary inline-flex items-center"
                >
                  <BookOpen className="h-4 w-4 mr-2" />
                  Xem b√†i h·ªçc
                </button>
              </div>
            ) : !quizCompleted ? (
              <>
                <div className="flex items-center justify-between mb-6">
                  <h2 className="card-title">Quiz - {topic.title}</h2>
                  <div className="text-sm text-gray-600">
                    C√¢u {currentQuestion + 1} / {topic.quizzes.length}
                  </div>
                </div>

                <div className="mb-8">
                  <div className="w-full bg-gray-200 rounded-full h-2 mb-6">
                    <div
                      className="progress-fill"
                      style={{
                        width: `${
                          ((currentQuestion + 1) /
                            (topic.quizzes?.length || 1)) *
                          100
                        }%`,
                      }}
                    ></div>
                  </div>

                  <h3 className="text-lg font-semibold text-gray-900 mb-6">
                    {topic.quizzes[currentQuestion]?.question ||
                      "ƒêang t·∫£i c√¢u h·ªèi..."}
                  </h3>

                  <div className="space-y-3">
                    {(
                      topic.quizzes[currentQuestion]?.answers ||
                      topic.quizzes[currentQuestion]?.options ||
                      []
                    )?.map((option, index) => (
                      <label
                        key={index}
                        className={`block p-4 border-2 rounded-lg cursor-pointer transition-all ${
                          selectedAnswers[currentQuestion] === index
                            ? "border-blue-500 bg-blue-50"
                            : "border-gray-200 hover:border-gray-300"
                        }`}
                      >
                        <input
                          type="radio"
                          name={`question-${currentQuestion}`}
                          value={index}
                          checked={selectedAnswers[currentQuestion] === index}
                          onChange={() =>
                            handleAnswerSelect(currentQuestion, index)
                          }
                          className="sr-only"
                        />
                        <div className="flex items-center">
                          <div
                            className={`w-4 h-4 rounded-full border-2 mr-3 ${
                              selectedAnswers[currentQuestion] === index
                                ? "border-blue-500 bg-blue-500"
                                : "border-gray-300"
                            }`}
                          >
                            {selectedAnswers[currentQuestion] === index && (
                              <div className="w-2 h-2 bg-white rounded-full mx-auto mt-1"></div>
                            )}
                          </div>
                          <span className="text-gray-900">{option}</span>
                        </div>
                      </label>
                    ))}
                  </div>
                </div>

                <div className="flex justify-between">
                  <button
                    onClick={handlePrevQuestion}
                    disabled={currentQuestion === 0}
                    className="btn-secondary disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    C√¢u tr∆∞·ªõc
                  </button>

                  <button
                    onClick={handleNextQuestion}
                    disabled={selectedAnswers[currentQuestion] === undefined}
                    className="btn-primary disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {currentQuestion === topic.quizzes.length - 1
                      ? "Ho√†n th√†nh"
                      : "C√¢u ti·∫øp"}
                  </button>
                </div>
              </>
            ) : (
              <div className="text-center py-8">
                <div className="mb-6">
                  <div className="inline-flex items-center justify-center w-16 h-16 bg-green-100 rounded-full mb-4">
                    {quizScore >= 70 ? (
                      <CheckCircle className="h-8 w-8 text-green-600" />
                    ) : (
                      <XCircle className="h-8 w-8 text-red-600" />
                    )}
                  </div>
                  <h3 className="text-2xl font-bold text-gray-900 mb-2">
                    {quizScore >= 70 ? "Ch√∫c m·ª´ng!" : "C·∫ßn c·∫£i thi·ªán"}
                  </h3>
                  <p className="text-gray-600 mb-4">
                    B·∫°n ƒë√£ ƒë·∫°t {quizScore}% ƒëi·ªÉm s·ªë.
                  </p>
                  {quizScore >= 70 ? (
                    <p className="text-green-600 font-medium">
                      B·∫°n ƒë√£ ho√†n th√†nh ch·ªß ƒë·ªÅ n√†y!
                    </p>
                  ) : (
                    <p className="text-orange-600 font-medium">
                      H√£y √¥n l·∫°i b√†i h·ªçc v√† th·ª≠ l·∫°i nh√©!
                    </p>
                  )}
                </div>

                <div className="flex justify-center space-x-4">
                  <button onClick={resetQuiz} className="btn-secondary">
                    <RotateCcw className="h-4 w-4 mr-2" />
                    L√†m l·∫°i
                  </button>
                  <button
                    onClick={() => setShowQuiz(false)}
                    className="btn-primary"
                  >
                    <BookOpen className="h-4 w-4 mr-2" />
                    Xem b√†i h·ªçc
                  </button>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default TopicDetail;
